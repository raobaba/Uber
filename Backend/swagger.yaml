openapi: 3.0.0
info:
  title: Uber API
  version: 1.0.0
  description: API documentation for Uber ride service.

servers:
  - url: http://localhost:8000
    description: Local development server
  - url: https://uber-ride.onrender.com
    description: Production server (Render)
  - url: https://api.uber-ride.com
    description: Production server (Official)

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      required:
        - fullname
        - email
        - password
      properties:
        _id:
          type: string
          example: "65f8b123abcd567efg890123"
        fullname:
          type: object
          properties:
            firstname:
              type: string
              minLength: 3
              example: "John"
            lastname:
              type: string
              minLength: 3
              example: "Doe"
        email:
          type: string
          format: email
          example: "johndoe@example.com"
        password:
          type: string
          format: password
          example: "$2a$10$hashedPassword"
        socketId:
          type: string
          example: "someSocketId123"
    Captain:
      type: object
      properties:
        _id:
          type: string
          example: "650a1c3f8f5c9b001c2c4e99"
        fullname:
          type: object
          properties:
            firstname:
              type: string
              example: "John"
            lastname:
              type: string
              example: "Doe"
        email:
          type: string
          example: "captain@example.com"
        status:
          type: string
          enum: ["active", "inactive"]
          example: "inactive"
        vehicle:
          type: object
          properties:
            color:
              type: string
              example: "Red"
            plate:
              type: string
              example: "XYZ123"
            capacity:
              type: integer
              example: 4
            vehicleType:
              type: string
              enum: ["car", "motorcycle", "auto"]
              example: "car"
paths:
  /api/v1/user/register:
    post:
      summary: Register a new user
      description: Creates a new user with a hashed password and returns a JWT token.
      tags:
        - User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - fullname
                - email
                - password
              properties:
                fullname:
                  type: object
                  required:
                    - firstname
                  properties:
                    firstname:
                      type: string
                      minLength: 3
                      example: "John"
                    lastname:
                      type: string
                      minLength: 3
                      example: "Doe"
                email:
                  type: string
                  format: email
                  example: "johndoe@example.com"
                socketId:
                  type: string
                  format: socketId
                  example: "someSocketId123"
                password:
                  type: string
                  format: password
                  minLength: 6
                  example: "SecurePass123!"
      responses:
        "201":
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                  user:
                    type: object
                    properties:
                      _id:
                        type: string
                        example: "65f8b123abcd567efg890123"
                      fullname:
                        type: object
                        properties:
                          firstname:
                            type: string
                            example: "John"
                          lastname:
                            type: string
                            example: "Doe"
                      email:
                        type: string
                        example: "johndoe@example.com"
        "400":
          description: Validation error or user already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User already exists"
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        msg:
                          type: string
                          example: "Invalid Email"

  /api/v1/user/login:
    post:
      summary: User login
      description: Authenticates a user and returns a JWT token.
      tags:
        - User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: "johndoe@example.com"
                password:
                  type: string
                  format: password
                  example: "password123"
      responses:
        "200":
          description: User logged in successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                  user:
                    $ref: "#/components/schemas/User"
        "400":
          description: Validation error (e.g., invalid email or short password)
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        msg:
                          type: string
                          example: "Invalid Email"
                        param:
                          type: string
                          example: "email"
                        location:
                          type: string
                          example: "body"
        "401":
          description: Invalid email or password
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid email or password"
        "500":
          description: Internal server error

  /api/v1/user/profile:
    get:
      summary: Get user profile
      description: Returns the profile details of the authenticated user.
      security:
        - bearerAuth: []
      tags:
        - User
      responses:
        "200":
          description: Successfully retrieved user profile
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          description: Unauthorized, token missing or invalid
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized access"

  /api/v1/user/logout:
    get:
      summary: Logout user
      description: Logs out the authenticated user by blacklisting the token.
      security:
        - bearerAuth: []
      tags:
        - User
      responses:
        "200":
          description: Successfully logged out
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Logged out"
        "401":
          description: Unauthorized, token missing or invalid
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized access"

  /api/v1/captain/register:
    post:
      summary: Register a new Captain
      description: Registers a new Captain and returns a JWT token.
      tags:
        - Captain
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                fullname:
                  type: object
                  properties:
                    firstname:
                      type: string
                      example: "John"
                    lastname:
                      type: string
                      example: "Doe"
                email:
                  type: string
                  example: "captain@example.com"
                password:
                  type: string
                  example: "securePassword123"
                vehicle:
                  type: object
                  properties:
                    color:
                      type: string
                      example: "Red"
                    plate:
                      type: string
                      example: "XYZ123"
                    capacity:
                      type: integer
                      example: 4
                    vehicleType:
                      type: string
                      enum: ["car", "motorcycle", "auto"]
                      example: "car"
      responses:
        "201":
          description: Captain registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: "your-jwt-token"
                  captain:
                    $ref: "#/components/schemas/Captain"
        "400":
          description: Bad request, validation errors
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        msg:
                          type: string
                          example: "Invalid Email"

  /api/v1/captain/login:
    post:
      summary: Login Captain
      description: Authenticates a Captain and returns a JWT token.
      tags:
        - Captain
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "captain@example.com"
                password:
                  type: string
                  example: "securePassword123"
      responses:
        "200":
          description: Successfully logged in
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: "your-jwt-token"
                  captain:
                    $ref: "#/components/schemas/Captain"
        "401":
          description: Unauthorized, invalid credentials
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid email or password"

  /api/v1/captain/profile:
    get:
      summary: Get Captain Profile
      description: Retrieves the authenticated Captain's profile.
      security:
        - bearerAuth: []
      tags:
        - Captain
      responses:
        "200":
          description: Successfully retrieved profile
          content:
            application/json:
              schema:
                type: object
                properties:
                  captain:
                    $ref: "#/components/schemas/Captain"
        "401":
          description: Unauthorized, token missing or invalid
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized access"

  /api/v1/captain/logout:
    get:
      summary: Logout Captain
      description: Logs out the authenticated Captain by blacklisting the token.
      security:
        - bearerAuth: []
      tags:
        - Captain
      responses:
        "200":
          description: Successfully logged out
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Logout successfully"
        "401":
          description: Unauthorized, token missing or invalid
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized access"
